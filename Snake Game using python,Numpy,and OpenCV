import cv2
import mediapipe as mp
import numpy as np
import random

# Initialize MediaPipe Hand Tracking
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_drawing = mp.solutions.drawing_utils

# Game Constants
GRID_SIZE = 20
WINDOW_SIZE = 400
CELL_SIZE = WINDOW_SIZE // GRID_SIZE
FPS = 10

# Initialize Game Variables
def initialize_game():
    return [(10, 10)], (0, -1), (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)), 0, False

snake, direction, food, score, game_over = initialize_game()

# OpenCV Window
cap = cv2.VideoCapture(0)

def draw_grid():
    """Draw the snake, food, and grid."""
    grid = np.zeros((WINDOW_SIZE, WINDOW_SIZE, 3), dtype=np.uint8)
    for x, y in snake:
        cv2.rectangle(grid, (x * CELL_SIZE, y * CELL_SIZE),
                      ((x + 1) * CELL_SIZE, (y + 1) * CELL_SIZE), (0, 255, 0), -1)
    fx, fy = food
    cv2.rectangle(grid, (fx * CELL_SIZE, fy * CELL_SIZE),
                  ((fx + 1) * CELL_SIZE, (fy + 1) * CELL_SIZE), (0, 0, 255), -1)
    return grid


def spawn_food():
    """Ensure food does not overlap the snake."""
    while True:
        new_food = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
        if new_food not in snake:
            return new_food


def detect_finger_direction(results):
    """Detect finger direction and adjust the snake's direction."""
    global direction
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            index_finger_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            wrist = hand_landmarks.landmark[mp_hands.HandLandmark.WRIST]

            dx = index_finger_tip.x - wrist.x
            dy = index_finger_tip.y - wrist.y

            # Determine direction based on finger movement
            if abs(dx) > abs(dy):
                if dx > 0 and direction != (-1, 0):
                    direction = (1, 0)  # Right
                elif dx < 0 and direction != (1, 0):
                    direction = (-1, 0)  # Left
            else:
                if dy > 0 and direction != (0, -1):
                    direction = (0, 1)  # Down
                elif dy < 0 and direction != (0, 1):
                    direction = (0, -1)  # Up


while True:
    # Capture Frame
    ret, frame = cap.read()
    if not ret:
        break
    frame = cv2.flip(frame, 1)
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    # Detect Finger Direction
    detect_finger_direction(results)

    # Game Logic
    if not game_over:
        # Move Snake
        head_x, head_y = snake[0]
        new_head = (head_x + direction[0], head_y + direction[1])
        if new_head in snake or new_head[0] < 0 or new_head[0] >= GRID_SIZE or new_head[1] < 0 or new_head[1] >= GRID_SIZE:
            game_over = True
        else:
            snake.insert(0, new_head)
            if new_head == food:
                food = spawn_food()
                score += 1
            else:
                snake.pop()

    # Draw Game
    grid = draw_grid()
    cv2.putText(grid, f"Score: {score}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    if game_over:
        cv2.putText(grid, "Game Over! Press R to Restart", (20, 200), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
    cv2.imshow("Snake Game", grid)

    # Show Camera Feed
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
    cv2.imshow("Camera", frame)

    # Handle Key Presses
    key = cv2.waitKey(1000 // FPS) & 0xFF
    if key == 27:  # Esc key
        break
    elif key == ord('r') and game_over:  # Restart Game
        snake, direction, food, score, game_over = initialize_game()

# Cleanup
cap.release()
hands.close()
cv2.destroyAllWindows()
